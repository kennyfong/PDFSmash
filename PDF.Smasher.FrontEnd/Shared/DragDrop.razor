@using BlazorInputFile
@using PDF.Smasher.FrontEnd.Services
@inject IJSRuntime jsRuntime
@inject IPDFService PDFService

<div class="row">
    <div class="col-12 p-0">
        <div class="dropzone @dropClass rounded">
            <BlazorInputFile.InputFile id="fileInput" multiple title=""
                                       OnChange="HandleFileInputChange"
                                       accept="application/pdf"
                                       @ondragenter="HandleDragEnter"
                                       @ondragleave="HandleDragLeave" />
            Upload PDFs
        </div>
        @if ((fileTypeError || fileSizeError))
        {
            <ul class="validation-errors mb-0">
                @if (fileTypeError)
                {
                    <li class="validation-message">Only image files are accepted.</li>
                }
                @if (fileSizeError)
                {
                    <li class="validation-message">The max file size is @MaxFileSizeMB MB.</li>
                }
            </ul>
        }
        @if (selectedFiles != null && selectedFiles.Count > 0)
        {
            <div class="col-12">
                <ul>
                    @foreach (var file in selectedFiles)
                    {
                        <li>
                            @file.Name
                            <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                    @onclick="@(e => RemoveFile(file))">
                                <small class="align-text-bottom">Remove</small>
                            </button>
                        </li>
                    }
                </ul>
            </div>


            <button class="btn btn-primary" @onclick="RemoveCert">Smash</button>

        }
    </div>
</div>

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Confirmation</MatDialogTitle>
    <MatDialogContent>
        <p>Are you sure?</p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">No</MatButton>
        <MatButton OnClick="@OkClick">Yes</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@completeDialogIsOpen">
    <MatDialogTitle>Complete</MatDialogTitle>
    <MatDialogContent>
        <p>PDF Document Transformation Complete</p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { completeDialogIsOpen = false; })">OK</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@errorDialogIsOpen">
    <MatDialogTitle>Error</MatDialogTitle>
    <MatDialogContent>
        <p>An error has occurred</p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { errorDialogIsOpen = false; })">OK</MatButton>
    </MatDialogActions>
</MatDialog>



@code {

    const int MaxFileSizeMB = 5;
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB
    private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileTypeError = false;
    private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();
    bool dialogIsOpen = false;
    bool completeDialogIsOpen = false;
    bool errorDialogIsOpen = false;

    private void HandleDragEnter()
    {
        dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleFileInputChange(IFileListEntry[] files)
    {
        dropClass = "";
        fileSizeError = false;
        fileTypeError = false;
        List<string> acceptedFileTypes = new List<string>() { "application/pdf" };
        if (files != null)
        {
            foreach (var file in files)
            {
                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }

                if (!acceptedFileTypes.Contains(file.Type))
                {
                    error = true;
                    fileTypeError = true;
                }

                //keep the good files
                if (!error)
                {
                    selectedFiles.Add(file);
                }
            }
        }
    }

    private void RemoveFile(IFileListEntry file)
    {
        selectedFiles.Remove(file);
    }

    private async Task OkClick()
    {
        dialogIsOpen = false;

        try
        {
            foreach (var file in selectedFiles)
            {
                var result = await PDFService.RemoveCertFromPDF(file);
                await jsRuntime.InvokeVoidAsync(
              "downloadFromByteArray",
              new
              {
                  ByteArray = result,
                  FileName = string.Concat("SMASHED_" + file.Name),
                  ContentType = "application/pdf"
              });
            }

            completeDialogIsOpen = true;

            selectedFiles = new List<IFileListEntry>();
        } catch(Exception ex)
        {
            errorDialogIsOpen = true;
        }
    }

    private async Task RemoveCert()
    {
        dialogIsOpen = true;


    }

}
